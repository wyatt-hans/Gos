{
  "name": "msgpack2",
  "description": "Latest version of node.js msgpack bindings",
  "version": "0.1.10",
  "homepage": "https://github.com/JulesAU/node-msgpack",
  "author": {
    "name": "Peter Griess",
    "email": "pg@std.in"
  },
  "contributors": [
    {
      "name": "Tom Taylor",
      "email": "tom@tomtaylor.co.uk",
      "url": "http://tomtaylor.co.uk"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/JulesAU/node-msgpack"
  },
  "main": "./lib/msgpack",
  "directories": {
    "lib": "lib"
  },
  "engines": {
    "node": ">=0.4.0"
  },
  "scripts": {
    "preinstall": "make",
    "preuninstall": "make clean"
  },
  "bin": {
    "json2msgpack": "./bin/json2msgpack",
    "msgpack2json": "./bin/msgpack2json"
  },
  "readme": "`node-msgpack` is an addon for [NodeJS](http://nodejs.org) that provides an\nAPI for serializing and de-serializing JavaScript objects using the\n[MessagePack](http://msgpack.sourceforge.net) library. The performance of this\naddon compared to the native `JSON` object is quite good, and the space\nrequired for serialized data is far less than JSON.\n\n### Building / Installing from npm\n    npm install msgpack2\n\n### Building / Installing from source\n    # Fetch it from github\n    cd node_modules\n    git clone git://github.com/JulesAU/node-msgpack.git msgpack2\n    cd msgpack2\n\n    # Bootstrap the MsgPack library:\n    git submodule init\n    git submodule update\n    cd deps/msgpack-full/cpp\n    ./bootstrap\n\n    # Now build the node-msgpack module:\n    cd ../../../\n    make\n\n### Usage\n\nThis module provides two methods: `pack()`, which consumes a JavaScript object\nand produces a node Buffer object; and `unpack()`, which consumes a node Buffer\nobject and produces a JavaScript object. Packing of all native JavaScript types\n(undefined, boolean, numbers, strings, arrays and objects) is supported, as\nis the node Buffer type.\n\nThe below code snippet packs and then unpacks a JavaScript object, verifying\nthe resulting object at the end using `assert.deepEqual()`.\n\n    var assert = require('assert');\n    var msgpack = require('msgpack2');\n\n    var o = {\"a\" : 1, \"b\" : 2, \"c\" : [1, 2, 3]};\n    var b = msgpack.pack(o);\n    var oo = msgpack.unpack(b);\n\n    assert.deepEqual(oo, o);\n\nAs a convenience, a higher level streaming API is provided in the\n`msgpack.Stream` class, which can be constructed around a `net.Stream`\ninstance. This object emits `msg` events when an object has been received.\n\n    var msgpack = require('msgpack2');\n\n    // ... get a net.Stream instance, s, from somewhere\n\n    var ms = new msgpack.Stream(s);\n    ms.addListener('msg', function(m) {\n        sys.debug('received message: ' + sys.inspect(m));\n    });\n\n### Type Mapping\n\nThe JavaScript type system does not map cleanly on to the MsgPack type system,\nthough it's pretty close.\n\nWhen packing, JavaScript values are mapped to MsgPack types as follows\n\n   * `undefined` and `null` values map to `MSGPACK_OBJECT_NIL`\n   * `boolean` values map to `MSGPACK_OBJECT_BOOLEAN`\n   * `number` values map differently depending on their value\n      * Floating point values map to `MSGPACK_OBJECT_DOUBLE`\n      * Positive values map to `MSGPACK_OBJECT_POSITIVE_INTEGER`\n      * Negative values map to `MSGPACK_OBJECT_NEGATIVE_INTEGER`\n   * `string` values map to `MSGPACK_OBJECT_RAW`; all strings are serialized\n     with UTF-8 encoding\n   * Array values (as defined by `Array.isArray()`) map to\n     `MSGPACK_OBJECT_ARRAY`; each element in the array is packed individually\n     the rules in this list\n   * NodeJS Buffer values map to `MSGPACK_OBJECT_RAW`\n   * Everything else maps to `MSGPACK_OBJECT_MAP`, where we iterate over the object's\n     properties and pack them and their values as per the mappings in this list\n\nWhen unpacking, MsgPack types are mapped to JavaScript values as follows\n\n   * `MSGPACK_OBJECT_NIL` values map to the `null` value\n   * `MSGPACK_OBJECT_BOOLEAN` values map to `boolean` values\n   * `MSGPACK_OBJECT_POSITIVE_INTEGER`, `MSGPACK_OBJECT_NEGATIVE_INTEGER` and\n     `MSGPACK_OBJECT_DOUBLE` values map to `number` values\n   * `MSGPACK_OBJECT_ARRAY` values map to arrays; each object in the array is\n      packed individually using the rules in this list\n   * `MSGPACK_OBJECT_RAW` values are mapped to `string` values; these values are\n     unpacked using either UTF-8 or ASCII encoding, depending on the contents\n     of the raw buffer\n   * `MSGPACK_OBJECT_MAP` values are mapped to JavaScript objects; keys and values\n     are unpacked individually using the rules in this list\n\nStrings are particularly problematic here, as it's difficult to get hints down\ninto the packing and unpacking codepaths about how to interpret a particular\nstring or `MSGPACK_OBJECT_RAW`. If you have strict requirements about the\nencoding of your strings, it's recommended that you populate a Buffer object\nyourself (e.g. using `Buffer.write()`) and pack that buffer rather than the\nstring. This will ensure that you can control what gets packed.\n\nWhen unpacking, things are trickier as there is no way to know the encoding\nused when a string was packed. There is an [an open\nticket](http://github.com/msgpack/msgpack/issues/issue/13) for the MsgPack\nformat to address this.\n\n### Command Line Utilities\n\nAs a convenience and for debugging, `bin/json2msgpack` and `bin/msgpack2json`\nare provided to convert JSON data to and from MessagePack data, reading from\nstdin and writing to stdout.\n\n    % echo '[1, 2, 3]' | ./bin/json2msgpack | xxd -\n    0000000: 9301 0203                                ....\n    % echo '[1, 2, 3]' | ./bin/json2msgpack | ./bin/msgpack2json\n    [1,2,3]\n\n### Building and installation\n\nThere are two ways to install msgpack.\n\n## npm\n\n\t\tnpm install msgpack2\n\nThis should build and install msgpack for you. Then just `require('msgpack2')`.\n\n## Manually\n\nUse `make` to build the add-on, then manually copy `build/default/mpBindings.node`\nand `lib/msgpack.js` it to wherever your node.js installation will look for it (or\nadd the build directory to your `$NODE_PATH`).\n\n    % ls\n    LICENSE  Makefile  README.md  deps/  src/  tags  test.js\n    % make\n\nThe MessagePack library on which this depends is packaged with `node-msgpack`\nand will be built as part of this process.\n\n**Note:** MessagePack may fail to build if you do not have a modern version of\ngcc in your `$PATH`. On Mac OS X Snow Leopard (10.5.x), you may have to use\n`gcc-4.2`, which should come with your box but is not used by default.\n\n    % make CC=gcc-4.2 CXX=gcc-4.2\n\n### Distributing to NPM\n    git clone git://github.com/JulesAU/node-msgpack.git msgpack2\n    cd msgpack2\n\n    # Bootstrap the MsgPack library:\n    git submodule init\n    git submodule update\n    cd deps/msgpack-full/cpp\n    ./bootstrap\n\n    cd ../../../\n    npm publish\n\n",
  "_id": "msgpack2@0.1.10",
  "_from": "msgpack2"
}
