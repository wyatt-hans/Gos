{
  "name": "msgpack-rpc",
  "version": "0.0.2",
  "description": "node-msgpack-rpc is an implementation of the Msgpack-RPC protocol specification for node.js",
  "main": "./lib/msgpack-rpc",
  "repository": {
    "type": "git",
    "url": "https://github.com/pingles/node-msgpack-rpc"
  },
  "directories": {
    "lib": "./lib"
  },
  "dependencies": {
    "msgpack": "0.1.4"
  },
  "readme": "node-msgpack-rpc\n================\n\nnode-msgpack-rpc is an implementation of the [Msgpack-RPC](http://redmine.msgpack.org/projects/msgpack/wiki/RPCDesign) protocol specification for node.js.  Msgpack-RPC is built ontop of the very fast [MessagePack](http://msgpack.org) serialization format. This implementation supports tcp and unix socket transports (it may one day support UDP).\n\nSimple Usage\n------------\n\nThe easiest way to create a server is with a handler object.  All incoming calls will be invoked on the handler object:\n    \n    var handler = {\n      'add' : function(a, b, response) {\n         response.result( a + b );\n       }\n    }\n\n    var rpc = require('msgpack-rpc');\n    rpc.createServer();\n    rpc.setHandler(handler);\n    rpc.listen(8000);\n\na corresponding client might look like:\n\n    var c = rpc.createClient(8000, '127.0.0.1', function() {\n      c.invoke('add', 5, 4, function(err, response) {\n        assert.equal(9, response);\n        c.close();\n      }\n    });\n\n\nWithout a handler\n-----------------\n\n    rpc.createServer(function(rpc_stream) {\n      rpc_stream.on('request', function(method, params, response) {\n        if(method == 'add') {\n          response.result( params[0] + params[1] );\n        } else {\n          response.error(\"unknown method!\");\n        }\n      }\n\n      rpc_stream.on('notify', function(method, params) {\n        console.log(\"recieved notification: \" + method);\n      });\n    });\n    rpc.listen(8000);\n\nSession Pool\n------------\n\nThis module also provides a session pool which allows you to re-use client connections:\n\n    var sp = new SesssionPool();\n    sp.getClient(8000, '127.0.0.1').invoke('hello','world', function(err, response) { ... });;\n    sp.getClient(8001, '127.0.0.1').invoke('hello','world', function(err, response) { ... });;\n    \n    // Uses same tcp connection as above\n    sp.getClient(8000, '127.0.0.1').invoke('goodbye','world', function(err, response) { ... });;\n\n    sp.closeClients();\n\nInstallation\n------------\n\nFirst you will need to install the [node-msgpack](http://github.com/pgriess/node-msgpack) add-on\n\nTo install node-msgpack-rpc with npm:\n\n    git clone http://github.com/bpot/node-msgpack-rpc/\n    cd node-msgpack-rpc\n    npm link .\n\n\nRPC Stream API\n--------------\n\nClients and the streams passed to servers for incoming connections are both instances of MsgpackRPCStream.\n\nMethods\n\n    c.createClient(port, [hostname], [ready_cb]);\n    c.invoke(method, [param1, param2, ...], cb);\n    c.notify(method, [param1, param2, ...]);\n    c.setTimeout(milliseconds);  // Setting this will cause requests to fail with err \"timeout\" if they don't recieve a response for the specified period\n    c.close(); // Close the socket for this client\n    c.stream // underlying net.Stream object\n\nEvents\n\n    'ready' // emitted when we've connected to the server\n    'request' // recieved request\n    'notify' // recieved notification\n\n\nTODO\n----\n* UDP Support?\n\n",
  "_id": "pingles-msgpack-rpc@0.0.2",
  "dist": {
    "shasum": "c5083670b3acdc8a733f113a3330a89ca43255b9"
  },
  "_from": "pingles-msgpack-rpc"
}
